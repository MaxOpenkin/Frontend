Теоретические вопросы по Java Core для самооценки и подготовки к собеседованию
Основы Java:

Что такое Java?
Объясните принципы ООП на примере Java.
В чем разница между JDK и JRE?
Что такое garbage collection в Java?
Типы данных и переменные:

Какие типы данных есть в Java?
Что такое автоупаковка и автораспаковка?
Объясните разницу между stack и heap памятью.
Управляющие конструкции:

Как работает цикл for в Java?
В чем разница между if-else и switch-case?
Классы и объекты:

Что такое конструктор в Java?
Объясните концепцию наследования в Java.
В чем разница между интерфейсом и абстрактным классом?
Исключения:

Что такое исключение в Java?
Объясните разницу между checked и unchecked исключениями.
Коллекции:

Какие основные интерфейсы коллекций существуют в Java?
В чем разница между List и Set?
Как работает HashMap?
Многопоточность:

Что такое поток в контексте Java?
Объясните концепцию синхронизации в многопоточном программировании.
Что такое deadlock и как его избежать?
Java 8 и новые версии:

Что такое лямбда-выражения в Java 8?
Как работают Stream API?
Что такое default методы в интерфейсах?
Java Virtual Machine:

Как работает JVM?
Что такое JIT компиляция?
Объясните, как устроена модель памяти в JVM.
Разработка и тестирование:

Что такое unit-тестирование в контексте Java?
Что такое Mockito и зачем он нужен?
Список вопросов, связанных с коллекциями в Java:
Основы коллекций:

Объясните иерархию коллекций в Java.
В чем разница между Collection и Collections в Java?
List, Set, Map:

Какие реализации интерфейса List вы знаете?
В чем разница между ArrayList и LinkedList?
Объясните особенности HashSet и TreeSet.
Какие основные реализации интерфейса Map существуют?
Работа с коллекциями:

Как можно синхронизировать коллекции в многопоточной среде?
Как можно отсортировать список в Java?
Что такое Comparator и Comparable?
Эффективность коллекций:

В каких случаях лучше использовать ArrayList, а в каких LinkedList?
Как работает внутренняя структура HashMap и как она влияет на производительность?
Какова сложность основных операций в различных типах коллекций (добавление, удаление, поиск)?
Изменения в коллекциях (Java 8+):

Какие нововведения в коллекциях были внедрены в Java 8?
Как использовать Stream API с коллекциями?
Concurrent Collections:

Что такое concurrent collections и в каких случаях их следует использовать?
В чем разница между ConcurrentHashMap и Hashtable?
Какие особенности у CopyOnWriteArrayList и CopyOnWriteArraySet?
Работа с коллекциями:

Как реализовать собственный итератор для коллекции?
Что такое fail-fast и fail-safe итераторы?
Как работает метод forEach в коллекциях?
Оптимизация и настройка коллекций:

Как управлять начальной емкостью коллекций, таких как ArrayList или HashMap?
Как влияет коэффициент загрузки на производительность HashMap?
Несколько вопросов, специально ориентированных на понимание объектно-ориентированного программирования (ООП) в Java:
Основы ООП:

Что такое инкапсуляция, наследование и полиморфизм в контексте Java?
Как в Java реализуется принцип абстракции?
В чем разница между статическим и динамическим полиморфизмом?
Класс Object:

Какие ключевые методы определены в классе Object?
Какие два класса в Java не являются наследниками класса Object?
Каково назначение метода clone() и как он работает?
Что делает метод getClass() и как он используется?
Контракт equals и hashCode:

В чем состоит контракт между equals и hashCode в Java?
Как правильно переопределять метод equals?
Почему важно переопределять метод hashCode, если переопределяется equals?
Приведите пример ситуации, когда нарушение контракта между equals и hashCode может привести к проблемам.
Принципы ООП на практике:

Как можно использовать композицию вместо наследования?
Приведите пример использования полиморфизма в Java.
Как интерфейсы в Java поддерживают принципы ООП?
Расширенные вопросы по ООП:

В чем разница между глубоким и поверхностным клонированием?
Каким образом можно обеспечить безопасность потоков в объектно-ориентированном коде?
Объясните концепцию "композиция над наследованием".




Java Core Theoretical Questions for Self-Assessment and Interview Preparation
Java Basics:

What is Java?
Explain the principles of OOP with examples in Java.
What's the difference between JDK and JRE?
What is garbage collection in Java?
Data Types and Variables:

What data types are available in Java?
What are autoboxing and unboxing?
Explain the difference between stack and heap memory.
Control Structures:

How does the for loop work in Java?
What's the difference between if-else and switch-case?
Classes and Objects:

What is a constructor in Java?
Explain the concept of inheritance in Java.
What's the difference between an interface and an abstract class?
Exceptions:

What is an exception in Java?
Explain the difference between checked and unchecked exceptions.
Collections:

What are the main collection interfaces in Java?
What's the difference between List and Set?
How does HashMap work?
Multithreading:

What is a thread in the context of Java?
Explain the concept of synchronization in multithreading.
What is a deadlock and how can it be avoided?
Java 8 and Newer Versions:

What are lambda expressions in Java 8?
How does the Stream API work?
What are default methods in interfaces?
Java Virtual Machine:

How does the JVM work?
What is JIT compilation?
Explain the memory model of the JVM.
Development and Testing:

What is unit testing in the context of Java?
What is Mockito and why is it needed?
Questions Related to Java Collections:
Basics of Collections:

Explain the collection hierarchy in Java.
What's the difference between Collection and Collections in Java?
List, Set, Map:

What implementations of the List interface do you know?
What's the difference between ArrayList and LinkedList?
Explain the characteristics of HashSet and TreeSet.
What are the main implementations of the Map interface?
Working with Collections:

How can collections be synchronized in a multithreaded environment?
How can a list be sorted in Java?
What are Comparator and Comparable?
Efficiency of Collections:

In what cases is it better to use ArrayList, and in which LinkedList?
How does the internal structure of HashMap work and how does it affect performance?
What's the complexity of the main operations in different types of collections (adding, removing, searching)?
Changes in Collections (Java 8+):

What new features were introduced in collections in Java 8?
How to use Stream API with collections?
Concurrent Collections:

What are concurrent collections and in which cases should they be used?
What's the difference between ConcurrentHashMap and Hashtable?
What are the characteristics of CopyOnWriteArrayList and CopyOnWriteArraySet?
Working with Collections:

How to implement a custom iterator for a collection?
What are fail-fast and fail-safe iterators?
How does the forEach method work in collections?
Optimizing and Configuring Collections:

How to manage the initial capacity of collections like ArrayList or HashMap?
How does the load factor affect the performance of HashMap?
Several questions specifically focused on understanding Object-Oriented Programming (OOP) in Java:
Basics of OOP:

What are encapsulation, inheritance, and polymorphism in the context of Java?
How is the principle of abstraction implemented in Java?
What's the difference between static and dynamic polymorphism?
Object Class:

What key methods are defined in the Object class?
Which two classes in Java are not descendants of the Object class?
What is the purpose of the clone() method, and how does it work?
What does the getClass() method do, and how is it used?
equals and hashCode Contract:

What is the contract between equals and hashCode in Java?
How to properly override the equals method?
Why is it important to override the hashCode method if equals is overridden?
Provide an example of a situation where violating the contract between equals and hashCode can lead to problems.
OOP Principles in Practice:

How can composition be used instead of inheritance?
Provide an example of polymorphism in Java.
How do interfaces in Java support OOP principles?
Advanced OOP Questions:

What's the difference between deep and shallow cloning?
How can thread safety be ensured in object-oriented code?
Explain the concept of "composition over inheritance".