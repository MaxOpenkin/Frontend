// Задача 1
// Напишите функцию, которая принимает два числа и возвращает большее значение.
// Вызов функции присвоить переменной и отобразить результат(переменную) в консоле

// Задача 2
// Напишите функцию, которая принимает строку и число n, а затем возвращает первые n символов строки.
// Для отображения результа работы функции, вызовите её три раза с различными параметрами,
// результат каждого вызова присвойте отдельной переменной и выведите переменные в консоль

// Задача 3
// Напишите функцию, которая принимает массив и элемент, а затем возвращает true,
// если элемент присутствует в массиве,
// и false в противном случае (если есть повторения заданного элемента в массиве, то на задачу это никак не влияет).
// Результат вызова функции отобразите в консоле

// Задача4* :
// Есть массив чисел - отсортировать его методом пузырька.




console.log('\n Функция с использованием метода Math.max: ');

function getMaxValue(a, b) {
    return Math.max(a, b)
}

const maxResult = getMaxValue(5, 16);
console.log(maxResult);



console.log('\n Функция с использованием метода для строки str.slice: ');

function getFirstChars(str, n) {
    return str.slice(0, n);
}

const result1 = getFirstChars('Петя делал свои дела ночью', 5);
const result2 = getFirstChars('Hello world!!!', 2);
const result3 = getFirstChars('Рыбалка удалась', 4);
console.log(result1);
console.log(result2);
console.log(result3);



console.log('\n Функция с использованием метода includes: ');

// Функция принимает массив и элемент, проверяет наличие элемента в массиве и возвращает true или false.

function containsElement(array, element) {
    return array.includes(element);
}

const array = [1, 5, 13, 6, 3, 33];
const elementToCheck = 3;
console.log(containsElement(array, elementToCheck));



console.log('\n Сортировка методом пузырька: ');

// Внешний цикл будет проходить по всем элементам массива,
// а внутренний — сравнивать текущий элемент с следующим и менять их местами при необходимости

function bubbleSort(array) {
    for (let i = 0; i < array.length; i++) {
        for (let j = 0; j < array.length - i - 1; j++) {
            if (array[j] > array[j + 1]) {  // по убыванию <
                let temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
    return array;
}

const naumbersArray = [12, 34, 7, 9, 78, 41, 48, 45, 5, 92];
console.log(bubbleSort(naumbersArray));



// Сумма элементов массива
// Дан массив [10, 20, 30, 40, 50]. Напишите функцию, которая возвращает сумму всех его элементов.

// Поиск минимального элемента в массиве
// Для массива [34, 78, 12, 9, 33, 54] напишите функцию, которая находит и возвращает его минимальный элемент.

// Обратный порядок массива
// Преобразуйте массив ['apple', 'banana', 'cherry'] так, чтобы его элементы шли в обратном порядке.

// Проверка на чётность элементов массива
// Дан массив [12, 7, 22, 16, 5]. Верните новый массив, содержащий только чётные числа.

// Среднее значение элементов массива
// Вычислите среднее значение элементов массива [5, 10, 15, 20, 25].

// Количество вхождений элемента в массив
// Для массива [1, 3, 7, 1, 3, 1, 1, 5] определите, сколько раз встречается число 1.

// Удаление элементов из массива
// Из массива [1, 2, 3, 4, 5, 3, 3] удалите все вхождения числа 3.

// Поиск индекса первого вхождения элемента в массиве
// Найдите индекс первого вхождения числа 9 в массиве [4, 6, 7, 9, 10, 9]. Если элемент отсутствует, верните -1.

// Слияние двух массивов
// Объедините два массива [1, 2, 3] и [4, 5, 6] в один.

// Сортировка массива по убыванию
// Отсортируйте массив [5, 3, 8, 6, 2] по убыванию.
